<?php

namespace MisionSucre\RipesBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ParticipacionComunitariaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ParticipacionComunitariaRepository extends EntityRepository
{
    public function findAllOrderedByTriunfadorAndAldea($aldea)
    {
          return $this->getEntityManager()
            ->createQuery(
                "SELECT DISTINCT pac.voceria, IDENTITY(p.user) as idusr,p.priNom,p.segNom, p.priApe, p.segApe, p.cedPer, p.sexPer,
                    cc.nombre AS ccnombre, a.nombre as aldea, a.id as idaldea,pac.organizacion_social
                    FROM
                     MisionSucreRipesBundle:Persona p, MisionSucreRipesBundle:ParticipacionComunitaria pac JOIN pac.cc cc,
                    MisionSucreRipesBundle:Triunfador trf JOIN trf.ambiente am JOIN am.aldea a
                    WHERE pac.user = p.user AND trf.user= p.user AND pac.user = trf.user
                    AND lower(pac.voceria) NOT LIKE lower(:ninguno) AND lower(pac.voceria) NOT LIKE lower(:ninguna) 
                    AND lower(pac.voceria) NOT LIKE '' AND am.aldea = :aldea"       
            )->setParameters(array("aldea"=>$aldea,"ninguno"=>"Ninguno","ninguna"=>"Ninguna"))
            ->getResult();
    }
    
    public function findAllOrderedByTriunfadorAndEje($eje)
    {
          return $this->getEntityManager()
            ->createQuery(
                "SELECT DISTINCT pac.voceria, IDENTITY(p.user) as idusr,p.priNom,p.segNom, p.priApe, p.segApe, p.cedPer, p.sexPer,
                    cc.nombre AS ccnombre, a.nombre as aldea, a.id as idaldea,pac.organizacion_social
                    FROM
                     MisionSucreRipesBundle:Persona p, MisionSucreRipesBundle:ParticipacionComunitaria pac JOIN pac.cc cc,
                    MisionSucreRipesBundle:Triunfador trf JOIN trf.ambiente am JOIN am.aldea a JOIN a.parroquia prq
                    WHERE pac.user = p.user AND trf.user= p.user AND pac.user = trf.user AND lower(pac.voceria) NOT LIKE ''
                    AND lower(pac.voceria) NOT LIKE lower(:ninguno) AND lower(pac.voceria) NOT LIKE lower(:ninguna) AND prq.eje = :eje
                    AND lower(pac.voceria) NOT LIKE 'no'
                    "
                    
            )->setParameters(array("eje"=>$eje,"ninguno"=>"Ninguno","ninguna"=>"Ninguna"))
            ->getResult();
    }
    public function findAllOrderedByTriunfador()
    {
          return $this->getEntityManager()
            ->createQuery(
                "SELECT DISTINCT pac.voceria, IDENTITY(p.user) as idusr,p.priNom,p.segNom, p.priApe, p.segApe, p.cedPer, p.sexPer,
                    cc.nombre AS ccnombre, a.nombre as aldea, a.id as idaldea, pac.organizacion_social
                    FROM MisionSucreRipesBundle:Persona p, MisionSucreRipesBundle:ParticipacionComunitaria pac JOIN pac.cc cc,
                    MisionSucreRipesBundle:Triunfador trf JOIN trf.ambiente am JOIN am.aldea a 
                    WHERE lower(pac.voceria) NOT LIKE lower(:ninguno) AND lower(pac.voceria) NOT LIKE lower(:ninguna)
                    AND pac.user = p.user AND trf.user= p.user AND pac.user = trf.user AND lower(pac.voceria) NOT LIKE '' AND lower(pac.voceria) NOT LIKE 'no' " 
            )->setParameters(array("ninguno"=>"Ninguno","ninguna"=>"Ninguna"))
            ->getResult();
    }
    
    public function findAllOrderedByDocentesAndAldea($aldea)
    {
          return $this->getEntityManager()
            ->createQuery(
                "SELECT DISTINCT pac.voceria, IDENTITY(p.user) as idusr,p.priNom,p.segNom, p.priApe, p.segApe, p.cedPer, p.sexPer,
                    cc.nombre AS ccnombre, a.nombre as aldea, a.id as idaldea,pac.organizacion_social
                    FROM
                     MisionSucreRipesBundle:Persona p, MisionSucreRipesBundle:ParticipacionComunitaria pac JOIN pac.cc cc,
                    MisionSucreRipesBundle:Docente doc JOIN doc.aldea a
                    WHERE pac.user = p.user AND doc.user= p.user AND pac.user = doc.user AND lower(pac.voceria) NOT LIKE ''
                    AND lower(pac.voceria) NOT LIKE lower(:ninguno) AND lower(pac.voceria) NOT LIKE lower(:ninguna) AND a.id = :aldea
                    AND lower(pac.voceria) NOT LIKE 'no'                    
                    "
                    
            )->setParameters(array("aldea"=>$aldea,"ninguno"=>"Ninguno","ninguna"=>"Ninguna"))
            ->getResult();
    }
    public function findAllOrderedByDocentesAndEje($eje)
    {
          return $this->getEntityManager()
            ->createQuery(
                "SELECT DISTINCT pac.voceria, IDENTITY(p.user) as idusr,p.priNom,p.segNom, p.priApe, p.segApe, p.cedPer, p.sexPer,
                    cc.nombre AS ccnombre, a.nombre as aldea, a.id as idaldea,pac.organizacion_social
                    FROM
                     MisionSucreRipesBundle:Persona p, MisionSucreRipesBundle:ParticipacionComunitaria pac JOIN pac.cc cc,
                    MisionSucreRipesBundle:Docente doc JOIN doc.aldea a JOIN a.parroquia prq
                    WHERE pac.user = p.user AND doc.user= p.user AND pac.user = doc.user AND lower(pac.voceria) NOT LIKE ''
                    AND lower(pac.voceria) NOT LIKE lower(:ninguno) AND lower(pac.voceria) NOT LIKE lower(:ninguna) AND prq.eje = :eje AND lower(pac.voceria) NOT LIKE 'no'
                    "
                    
            )->setParameters(array("eje"=>$eje,"ninguno"=>"Ninguno","ninguna"=>"Ninguna"))
            ->getResult();
    }
    public function findAllOrderedByDocentes()
    {
          return $this->getEntityManager()
            ->createQuery(
                "SELECT DISTINCT pac.voceria, IDENTITY(p.user) as idusr,p.priNom,p.segNom, p.priApe, p.segApe, p.cedPer, p.sexPer,
                    cc.nombre AS ccnombre, a.nombre as aldea, a.id as idaldea, pac.organizacion_social
                    FROM
                     MisionSucreRipesBundle:Persona p, MisionSucreRipesBundle:ParticipacionComunitaria pac JOIN pac.cc cc,
                    MisionSucreRipesBundle:Docente doc JOIN doc.aldea a 
                    WHERE lower(pac.voceria) NOT LIKE lower(:ninguno) AND lower(pac.voceria) NOT LIKE lower(:ninguna)
                    AND pac.user = p.user AND doc.user= p.user AND pac.user = doc.user AND lower(pac.voceria) NOT LIKE '' AND lower(pac.voceria) NOT LIKE 'no'
                    "
            )->setParameters(array("ninguno"=>"Ninguno","ninguna"=>"Ninguna"))
            ->getResult();
    }
    public function findAllOrderedByOperariosAndAldea($aldea)
    {
          return $this->getEntityManager()
            ->createQuery(
                "SELECT DISTINCT pac.voceria, IDENTITY(p.user) as idusr,p.priNom,p.segNom, p.priApe, p.segApe, p.cedPer, p.sexPer,
                    cc.nombre AS ccnombre, a.nombre as aldea, a.id as idaldea,pac.organizacion_social
                    FROM
                     MisionSucreRipesBundle:Persona p, MisionSucreRipesBundle:ParticipacionComunitaria pac JOIN pac.cc cc,
                    MisionSucreRipesBundle:Operario o JOIN o.aldea a
                    WHERE pac.user = p.user AND o.user= p.user AND pac.user = o.user AND lower(pac.voceria) NOT LIKE ''
                    AND lower(pac.voceria) NOT LIKE lower(:ninguno) AND lower(pac.voceria) NOT LIKE lower(:ninguna) AND a.id = :aldea AND lower(pac.voceria) NOT LIKE 'no'
                    "
                    
            )->setParameters(array("aldea"=>$aldea,"ninguno"=>"Ninguno","ninguna"=>"Ninguna"))
            ->getResult();
    }
    public function findAllOrderedByOperariosAndeje($eje)
    {
          return $this->getEntityManager()
            ->createQuery(
                "SELECT DISTINCT pac.voceria, IDENTITY(p.user) as idusr,p.priNom,p.segNom, p.priApe, p.segApe, p.cedPer, p.sexPer,
                    cc.nombre AS ccnombre, a.nombre as aldea, a.id as idaldea,pac.organizacion_social
                    FROM
                     MisionSucreRipesBundle:Persona p, MisionSucreRipesBundle:ParticipacionComunitaria pac JOIN pac.cc cc,
                    MisionSucreRipesBundle:Operario o JOIN o.aldea a JOIN a.parroquia prq
                    WHERE pac.user = p.user AND o.user= p.user AND pac.user = o.user AND lower(pac.voceria) NOT LIKE ''
                    AND lower(pac.voceria) NOT LIKE lower(:ninguno) AND lower(pac.voceria) NOT LIKE lower(:ninguna) AND prq.eje = :eje
                    AND lower(pac.voceria) NOT LIKE 'no'
                    "
                    
            )->setParameters(array("eje"=>$eje,"ninguno"=>"Ninguno","ninguna"=>"Ninguna"))
            ->getResult();
    }
    public function findAllOrderedByOperarios()
    {
          return $this->getEntityManager()
            ->createQuery(
                "SELECT DISTINCT pac.voceria, IDENTITY(p.user) as idusr,p.priNom,p.segNom, p.priApe, p.segApe, p.cedPer, p.sexPer,
                    cc.nombre AS ccnombre, a.nombre as aldea, a.id as idaldea,pac.organizacion_social
                    FROM
                     MisionSucreRipesBundle:Persona p, MisionSucreRipesBundle:ParticipacionComunitaria pac JOIN pac.cc cc,
                    MisionSucreRipesBundle:Operario o JOIN o.aldea a
                    WHERE pac.user = p.user AND o.user= p.user AND pac.user = o.user AND lower(pac.voceria) NOT LIKE ''
                    AND lower(pac.voceria) NOT LIKE lower(:ninguno) AND lower(pac.voceria) NOT LIKE lower(:ninguna)
                    AND lower(pac.voceria) NOT LIKE 'no'"
                    
            )->setParameters(array("ninguno"=>"Ninguno","ninguna"=>"Ninguna"))
            ->getResult();
    }
    public function findAllOrderedByCoordinadoresAndeje($eje)
    {
          return $this->getEntityManager()
            ->createQuery(
                "SELECT DISTINCT pac.voceria, IDENTITY(p.user) as idusr,p.priNom,p.segNom, p.priApe, p.segApe, p.cedPer, p.sexPer,
                    cc.nombre AS ccnombre, a.nombre as aldea, a.id as idaldea,pac.organizacion_social
                    FROM
                     MisionSucreRipesBundle:Persona p, MisionSucreRipesBundle:ParticipacionComunitaria pac JOIN pac.cc cc,
                    MisionSucreRipesBundle:CoordinadorAldea ca JOIN ca.aldea a JOIN a.parroquia prq
                    WHERE pac.user = p.user AND ca.user= p.user AND pac.user = ca.user AND lower(pac.voceria) NOT LIKE ''
                    AND lower(pac.voceria) NOT LIKE lower(:ninguno) AND lower(pac.voceria) NOT LIKE lower(:ninguna) AND prq.eje = :eje
                    AND lower(pac.voceria) NOT LIKE 'no'"
                    
            )->setParameters(array("eje"=>$eje,"ninguno"=>"Ninguno","ninguna"=>"Ninguna"))
            ->getResult();
    }
    public function findAllOrderedByCoordinadores()
    {
          return $this->getEntityManager()
            ->createQuery(
                "SELECT DISTINCT pac.voceria, IDENTITY(p.user) as idusr,p.priNom,p.segNom, p.priApe, p.segApe, p.cedPer, p.sexPer,
                    cc.nombre AS ccnombre, a.nombre as aldea, a.id as idaldea,pac.organizacion_social
                    FROM
                     MisionSucreRipesBundle:Persona p, MisionSucreRipesBundle:ParticipacionComunitaria pac JOIN pac.cc cc,
                    MisionSucreRipesBundle:CoordinadorAldea ca JOIN ca.aldea a 
                    WHERE pac.user = p.user AND ca.user= p.user AND pac.user = ca.user AND lower(pac.voceria) NOT LIKE ''
                    AND lower(pac.voceria) NOT LIKE lower(:ninguno) AND lower(pac.voceria) NOT LIKE lower(:ninguna)
                    AND lower(pac.voceria) NOT LIKE 'no'"
                    
            )->setParameters(array("ninguno"=>"Ninguno","ninguna"=>"Ninguna"))
            ->getResult();
    }
}
